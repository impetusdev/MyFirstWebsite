{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\TypeScript\\\\MyFirstWebsite\\\\src\\\\Components\\\\Lists.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst List = ({\n  people\n}) => {\n  //we're trying to get the program to return the jsx components rather than having the jsx generated in the app.tsx file\n  const renderList = () => {\n    return people.map(person => {\n      /*#__PURE__*/\n      _jsxDEV(\"li\", {\n        className: \"List\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"List-header\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"List-img\",\n            src: person.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: people.map(person => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: person.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this);\n};\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["C:/repos/TypeScript/MyFirstWebsite/src/Components/Lists.tsx"],"names":["React","List","people","renderList","map","person","url","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAWA,MAAMC,IAAsB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAc;AAC3C;AAEE,QAAMC,UAAU,GAAG,MAAM;AACvB,WAAOD,MAAM,CAACE,GAAP,CAAWC,MAAM,IAAI;AAC1B;AAAA;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,UAAf;AAA0B,YAAA,GAAG,EAAEA,MAAM,CAACC;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAKD,KANM,CAAP;AAOD,GARD;;AASA,sBACE;AAAA,cACGJ,MAAM,CAACE,GAAP,CAAWC,MAAM,IAAI;AACpB,0BACE;AAAA,kBAAMA,MAAM,CAACE;AAAb;AAAA;AAAA;AAAA;AAAA,cADF;AAGD,KAJA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASH,CArBD;;KAAMN,I;AAuBN,eAAeA,IAAf","sourcesContent":["import React from \"react\";\r\n\r\ninterface IProps{\r\n    people:{\r\n      url: string\r\n      name: string\r\n      age: number\r\n      note?: string\r\n    }[]\r\n  }\r\n\r\nconst List: React.FC<IProps> = ({people}) => {\r\n  //we're trying to get the program to return the jsx components rather than having the jsx generated in the app.tsx file\r\n\r\n    const renderList = () => {\r\n      return people.map(person => {\r\n        <li className=\"List\">\r\n          <div className=\"List-header\">\r\n            <img className=\"List-img\" src={person.url} />\r\n          </div>\r\n        </li>\r\n      })\r\n    }\r\n    return (\r\n      <ul>\r\n        {people.map(person => {\r\n          return (\r\n            <div>{person.name}</div>\r\n          )\r\n        })}\r\n      </ul>\r\n    )\r\n}\r\n\r\nexport default List"]},"metadata":{},"sourceType":"module"}