[{"C:\\repos\\TypeScript\\MyFirstWebsite\\src\\index.tsx":"1","C:\\repos\\TypeScript\\MyFirstWebsite\\src\\reportWebVitals.ts":"2","C:\\repos\\TypeScript\\MyFirstWebsite\\src\\App.tsx":"3","C:\\repos\\TypeScript\\MyFirstWebsite\\src\\Components\\Lists.tsx":"4","C:\\repos\\TypeScript\\MyFirstWebsite\\src\\Components\\AddToList.tsx":"5"},{"size":500,"mtime":1629445304891,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1629445304392,"results":"8","hashOfConfig":"7"},{"size":936,"mtime":1632914847913,"results":"9","hashOfConfig":"7"},{"size":947,"mtime":1632914401840,"results":"10","hashOfConfig":"7"},{"size":2269,"mtime":1632988039065,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1yiormh",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\repos\\TypeScript\\MyFirstWebsite\\src\\index.tsx",[],["24","25"],"C:\\repos\\TypeScript\\MyFirstWebsite\\src\\reportWebVitals.ts",[],"C:\\repos\\TypeScript\\MyFirstWebsite\\src\\App.tsx",[],"C:\\repos\\TypeScript\\MyFirstWebsite\\src\\Components\\Lists.tsx",["26","27"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport { IState as IProps} from \"../App\"\r\n\r\nconst List: React.FC<IProps> = ({people}) => {\r\n  //we're trying to get the program to return the jsx components rather than having the jsx generated in the app.tsx file\r\n\r\n    const renderList = (): JSX.Element[] => {\r\n      return people.map((person) => {\r\n        return (\r\n          <li className=\"List\">\r\n            <div className=\"List-header\">\r\n              <img className=\"List-img\" src={person.img} />\r\n              <h2>{person.name}</h2>\r\n            </div>\r\n            <p>{person.age} years old</p>\r\n            <p className=\"List-note\">{person.note}</p>\r\n          </li>\r\n        )\r\n      })\r\n    }\r\n    // so it looks like you can have functions local to this const\r\n    return (\r\n      <ul>\r\n        {renderList()}\r\n      </ul>\r\n    )\r\n}\r\n\r\nexport default List\r\n\r\n//TODO: https://youtu.be/jrKcJxF0lAU?t=2438","C:\\repos\\TypeScript\\MyFirstWebsite\\src\\Components\\AddToList.tsx",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":10,"nodeType":"34","messageId":"35","endLine":1,"endColumn":16},{"ruleId":"36","severity":1,"message":"37","line":13,"column":15,"nodeType":"38","endLine":13,"endColumn":60},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"@typescript-eslint/no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]